package net.newcapec.collect.formatter;import java.io.UnsupportedEncodingException;import java.util.Date;/** * 编码 */public class Encoder {    public static byte[] getBytes(String s, String codeName) throws UnsupportedEncodingException {        return s.getBytes(codeName);    }    public static byte[] getBytes(String fieldValueStr, String codeName, int length, PaddingMode padMode, byte padByte) throws UnsupportedEncodingException {        int offset = 0;        byte[] tmp;        switch (padMode) {            case PadLeft:                tmp = DataTran.padLeft(fieldValueStr, length, padByte).getBytes(codeName);                if (tmp.length > length) {                    offset = tmp.length - length;                }                break;            case PadRight:                tmp = DataTran.padRight(fieldValueStr, length, padByte).getBytes(codeName);                break;            case None:            default:                tmp = fieldValueStr.getBytes(codeName);                break;        }        byte[] buf = new byte[length];        if (tmp.length > length) {            System.arraycopy(tmp, offset, buf, 0, length);        } else {            System.arraycopy(tmp, 0, buf, 0, tmp.length);        }        return buf;    }    public static byte[] getBytes(byte value, int returnLength) {        byte[] buf = new byte[returnLength];        buf[returnLength - 1] = value;        return buf;    }    public static byte[] getBytes(short value, int returnLength) {        byte[] buf = new byte[returnLength];        byte[] targets = new byte[2];        targets[0] = (byte) (value >> 8 & 0xFF);        targets[1] = (byte) (value & 0xFF);        if (returnLength > 2) {            System.arraycopy(targets, 0, buf, returnLength - 2, 2);        } else {            System.arraycopy(targets, 2 - returnLength, buf, 0, returnLength);        }        return buf;    }    public static byte[] getBytes(int value, int returnLength) {        byte[] buf = new byte[returnLength];        byte[] targets = new byte[4];        for (int i = 0; i < 4; i++) {            targets[i] = (byte) ((value >> (3 - i) * 8) & 0xFF);        }        if (returnLength > 4) {            System.arraycopy(targets, 0, buf, returnLength - 4, 2);        } else {            System.arraycopy(targets, 4 - returnLength, buf, 0, returnLength);        }        return buf;    }    public static byte[] getBytes(long value, int returnLength) {        byte[] buf = new byte[returnLength];        byte[] targets = new byte[8];        for (int i = 0; i < 8; i++) {            targets[i] = (byte) ((value >> (7 - i) * 8) & 0xFF);        }        if (returnLength > 8) {            System.arraycopy(targets, 0, buf, returnLength - 8, 8);        } else {            System.arraycopy(targets, 8 - returnLength, buf, 0, returnLength);        }        return buf;    }    public static byte[] getBytes(long value, int returnLength, NumericType nt) {        if (nt == NumericType.HEX) {            return getBytes(value, returnLength);        } else {            String tmp = String.format("%0" + returnLength * 2 + "d", value);            return DataTran.hexStringToByteArray(tmp);        }    }    public static byte[] getBytesUP(long value, int returnLength, NumericType nt) {        if (nt == NumericType.HEX) {            return getBytes(value, returnLength);        } else {            if (returnLength % 2 == 1)                returnLength++;            String tmp = String.format("%0" + returnLength + "d", value);            return DataTran.hexStringToByteArray(tmp);        }    }    @SuppressWarnings("deprecation")    public static byte[] getBytes(Date lDateTime, TimeFormat format) {        byte[] bytes = null;        switch (format) {            case yyyyMMddHHmmss:                bytes = new byte[7];                bytes[0] = DataTran.intToBCD((1900 + lDateTime.getYear()) / 100);                bytes[1] = DataTran.intToBCD(lDateTime.getYear() % 100);                bytes[2] = DataTran.intToBCD(lDateTime.getMonth() + 1);                bytes[3] = DataTran.intToBCD(lDateTime.getDate());                bytes[4] = DataTran.intToBCD(lDateTime.getHours());                bytes[5] = DataTran.intToBCD(lDateTime.getMinutes());                bytes[6] = DataTran.intToBCD(lDateTime.getSeconds());                break;            case yyMMddHHmmss:                bytes = new byte[6];                bytes[0] = DataTran.intToBCD((1900 + lDateTime.getYear()) % 100);                bytes[1] = DataTran.intToBCD(lDateTime.getMonth() + 1);                bytes[2] = DataTran.intToBCD(lDateTime.getDate());                bytes[3] = DataTran.intToBCD(lDateTime.getHours());                bytes[4] = DataTran.intToBCD(lDateTime.getMinutes());                bytes[5] = DataTran.intToBCD(lDateTime.getSeconds());                break;            case yyyyMMdd:                bytes = new byte[4];                bytes[0] = DataTran.intToBCD((1900 + lDateTime.getYear()) / 100);                bytes[1] = DataTran.intToBCD(lDateTime.getYear() % 100);                bytes[2] = DataTran.intToBCD(lDateTime.getMonth() + 1);                bytes[3] = DataTran.intToBCD(lDateTime.getDate());                break;            case yyMMdd:                bytes = new byte[3];                bytes[0] = DataTran.intToBCD(lDateTime.getYear() % 100);                bytes[1] = DataTran.intToBCD(lDateTime.getMonth() + 1);                bytes[2] = DataTran.intToBCD(lDateTime.getDate());                break;            case HHmmss:                bytes = new byte[3];                bytes[0] = DataTran.intToBCD(lDateTime.getHours());                bytes[1] = DataTran.intToBCD(lDateTime.getMinutes());                bytes[2] = DataTran.intToBCD(lDateTime.getSeconds());                break;            case yyMMddHHmm:                bytes = new byte[5];                bytes[0] = DataTran.intToBCD(lDateTime.getYear() % 100);                bytes[1] = DataTran.intToBCD(lDateTime.getMonth() + 1);                bytes[2] = DataTran.intToBCD(lDateTime.getDate());                bytes[3] = DataTran.intToBCD(lDateTime.getHours());                bytes[4] = DataTran.intToBCD(lDateTime.getMinutes());                break;            default:                break;        }        return bytes;    }}